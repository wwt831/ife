3、文字样式

注意: 请记住，包含在元素中的文本是作为一个单一的实体。你不能将文字其中一部分选中或添加样式，如果你要这么做，那么你必须要用适合的元素来包装它们，比如 ( <span> 或者 <strong>), 或者使用伪元素，像::first-letter (选中元素文本的第一个字母), ::first-line (选中元素文本的第一行), 或者 ::selection (当前光标双击选中的文本)

字体样式，作用于字体的属性，会直接应用到文本中，比如使用哪种字体，字体的大小是怎样的，字体是粗体还是斜体，等等
	颜色  color
		p {
  			color: red;
		}
	字体种类  font-family
		p {
  			font-family: arial;
		}
	字体栈
		p {
		  font-family: "Trebuchet MS", Verdana, sans-serif;
		}
		在这种情况下，浏览器从列表的第一个开始，然后查看在当前机器中，这个字体是否可用。如果可用，就把这个字体应用到选中的元素中。如果不可用，它就移到列表中的下一个字体，然后再检查。
		注意: 有一些字体名称不止一个单词，比如Trebuchet MS ，那么就需要用引号包裹。
	字体大小  font-size
		html {
		  font-size: 10px;
		}
		
		h1 {
		  font-size: 2.6em;
		}
	字体样式
		font-style: 用来打开和关闭文本 italic (斜体)。 可能的值如下 (你很少会用到这个属性，除非你因为一些理由想将斜体文字关闭斜体状态)：
			normal: 将文本设置为普通字体 (将存在的斜体关闭)
			italic: 如果当前字体的斜体版本可用，那么文本设置为斜体版本；如果不可用，那么会利用 oblique 状态来模拟 italics。
			oblique: 将文本设置为斜体字体的模拟版本，也就是将普通文本倾斜的样式应用到文本中。
	字体粗细
		font-weight: 设置文字的粗体大小。这里有很多值可选，防止你有好几个可用的字体。 (比如 -light, -normal, -bold, -extrabold, -black, 等等), 不过事实上你很少会用到 normal 和 bold以外的值：
			normal, bold: 普通或者加粗的字体粗细
			lighter, bolder: 将当前元素的粗体设置为比其父元素粗体更细或更粗一步。100–900: 数值粗体值，如果需要，可提供比上述关键字更精细的粒度控制。
	文本转换
		text-transform: 允许你设置要转换的字体。值包括：
			none: 防止任何转型。
			uppercase: 将所有文本转为大写。
			lowercase: 将所有文本转为小写。
			capitalize: 转换所有单词让其首字母大写。
			full-width: 将所有字形转换成固定宽度的正方形，类似于等宽字体，允许对齐。拉丁字符以及亚洲语言字形（如中文，日文，韩文）
	文本装饰
		text-decoration: 设置/取消字体上的文本装饰 (你将主要使用此方法在设置链接时取消设置链接上的默认下划线。) 可用值为：
			none: 取消已经存在的任何文本装饰。
			underline: 文本下划线.
			overline: 文本上划线
			line-through: 穿过文本的线 strikethrough over the text.
		你应该注意到 text-decoration 可以一次接受多个值，如果你想要同时添加多个装饰值， 比如 text-decoration: underline overline.。	
	文字阴影
		text-shadow: 4px 4px 5px red;
			4 个属性如下:
				1、阴影与原始文本的水平偏移，可以使用大多数的 CSS 单位 length and size units, 但是 px 是比较合适的。这个值必须指定。
				2、阴影与原始文本的垂直偏移;效果基本上就像水平偏移，除了它向上/向下移动阴影，而不是左/右。这个值必须指定。
				3、模糊半径 - 更高的值意味着阴影分散得更广泛。如果不包含此值，则默认为0，这意味着没有模糊。可以使用大多数的 CSS 单位 length and size units.
				4、阴影的基础颜色，可以使用大多数的 CSS 颜色单位 CSS color unit. 如果没有指定，默认为 black.
	多种阴影
		您可以通过包含以逗号分隔的多个阴影值，将多个阴影应用于同一文本，例如：
			text-shadow: -1px -1px 1px #aaa,
             			0px 4px 1px rgba(0,0,0,0.5),
             			4px 4px 5px rgba(0,0,0,0.7),
             			0px 0px 7px rgba(0,0,0,0.4);			
		
文本布局风格，作用于文本的间距以及其他布局功能的属性，比如，允许操纵行与字之间的空间，以及在内容框中，文本如何对齐。
	文本对齐 
		text-align
			left: 左对齐文本。
			right: 右对齐文本。
			center: 居中文字
			justify: 使文本展开，改变单词之间的差距，使所有文本行的宽度相同。你需要仔细使用，它可以看起来很可怕。特别是当应用于其中有很多长单词的段落时。如果你要使用这个，你也应该考虑一起使用别的东西，比如 hyphens，打破一些更长的词语。
	行间距
		line-height 
			属性设置文本每行之间的高，可以接受大多数单位 length and size units，不过也可以设置一个无单位的值，作为乘数，通常这种是比较好的做法。无单位的值乘以 font-size 来获得 line-height。当行与行之间拉开空间，正文文本通常看起来更好更容易阅读。推荐的行高大约是 1.5–2 (双倍间距。) 所以要把我们的文本行高设置为字体高度的1.5倍，你可以使用这个:
			line-height: 1.5;
	字母和字间距
		letter-spacing 和 word-spacing 属性允许你设置你的文本中的字母与字母之间的间距、或是字与字之间的间距
		p::first-line {
  			letter-spacing: 2px;
 			word-spacing: 4px;
		}
	文本布局样式
		text-indent: 指定文本内容的第一行前面应该留出多少的水平空间。
		text-overflow: 
		white-space: 
		word-break: 

Font 简写
许多字体的属性也可以通过 font 的简写方式来设置 . 这些是按照以下顺序来写的：  font-style, font-variant, font-weight, font-stretch, font-size, line-height, and font-family.
	如果你想要使用 font 的简写形式，在所有这些属性中，只有 font-size 和 font-family 是一定要指定的。
	font-size 和 line-height 属性之间必须放一个正斜杠。
	一个完整的例子如下所示：
		font: italic normal bold normal 3em/1.5 Helvetica, Arial, sans-serif;


css选择器
简单选择器（Simple selectors）：通过元素类型、class 或 id 匹配一个或多个元素。
	p{}  .class{}  #id{}
属性选择器（Attribute selectors）：通过 属性 / 属性值 匹配一个或多个元素。
	[attr]：该选择器选择包含 attr 属性的所有元素，不论 attr 的值为何。
	[attr=val]：该选择器仅选择 attr 属性被赋值为 val 的所有元素。
	[attr~=val]：该选择器仅选择 attr 属性的值（以空格间隔出多个值）中有包含 val 值的所有元素，比如位于被空格分隔的多个类（class）中的一个类。
伪类（Pseudo-classes）：匹配处于确定状态的一个或多个元素，比如被鼠标指针悬停的元素，或当前被选中或未选中的复选框，或元素是DOM树中一父节点的第一个子节点。
伪元素（Pseudo-elements）:匹配处于相关的确定位置的一个或多个元素，例如每个段落的第一个字，或者某个元素之前生成的内容。 

组合器（Combinators）：这里不仅仅是选择器本身，还有以有效的方式组合两个或更多的选择器用于非常特定的选择的方法。例如，你可以只选择divs的直系子节点的段落，或者直接跟在headings后面的段落。
	A,B	匹配满足A（和/或）B的任意元素（参见下方 同一规则集上的多个选择器）.
	A B	匹配任意元素，满足条件：B是A的后代结点（B是A的子节点，或者A的子节点的子节点）
	A > B	匹配任意元素，满足条件：B是A的直接子节点
	A + B	匹配任意元素，满足条件：B是A的下一个兄弟节点（AB有相同的父结点，并且B紧跟在A的后面）
	A ~ B	匹配任意元素，满足条件：B是A之后的兄弟节点中的任意一个（AB有相同的父节点，B在A之后，但不一定是紧挨着A）   

多用选择器（Multiple selectors）：这些也不是单独的选择器；这个思路是将以逗号分隔开的多个选择器放在一个CSS规则下面， 以将一组声明应用于由这些选择器选择的所有元素
	可以使用逗号分隔选择器组，以将同一规则一次同时应用到多组选定元素。
	h1, h2, h3, h4, h5, h6 {
  		font-family: helvetica, 'sans serif';
	}